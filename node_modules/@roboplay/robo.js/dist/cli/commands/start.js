import { Command } from 'commander';
import fs from 'fs/promises';
import { logger } from '../../core/logger.js';
import { hasFilesRecursively } from '../utils/fs-helper.js';
import { color, composeColors } from '../../core/color.js';
import { loadConfig } from '../../core/config.js';

const command = new Command("start").description("Starts your bot in production mode.").option("-s --silent", "do not print anything").option("-v --verbose", "print more information for debugging").action(startAction);
var start_default = command;
async function startAction(options) {
  logger({
    enabled: !options.silent,
    level: options.verbose ? "debug" : "info"
  }).info(`Starting Robo in ${color.bold("production mode")}...`);
  logger.warn(`Thank you for trying Robo.js! This is a pre-release version, so please let us know of issues on GitHub.`);
  if (!await hasFilesRecursively(".robo/build")) {
    logger.error(
      `No production build found. Make sure to compile your Robo using ${composeColors(
        color.bold,
        color.blue
      )('"robo build"')} first.`
    );
    process.exit(1);
  }
  try {
    await fs.access(".robo/manifest.json");
  } catch (err) {
    logger.error(
      `The ${color.bold(
        ".robo/manifest.json"
      )} file is missing. Make sure your project structure is correct and run ${composeColors(
        color.bold,
        color.blue
      )('"robo build"')} again.`
    );
    process.exit(1);
  }
  const config = await loadConfig();
  const experimentalKeys = Object.entries(config.experimental ?? {}).filter(([, value]) => value).map(([key]) => key);
  if (experimentalKeys.length > 0) {
    const features = experimentalKeys.map((key) => color.bold(key)).join(", ");
    logger.warn(`Experimental flags enabled: ${features}.`);
  }
  const { Robo } = await import('../../core/robo.js');
  Robo.start();
}

export { start_default as default };
