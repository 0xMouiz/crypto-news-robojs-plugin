import fs from 'node:fs/promises';
import crypto from 'node:crypto';
import { logger } from '../../core/logger.js';

async function calculateSha1(fileBuffer) {
  return new Promise((resolve) => {
    const hash = crypto.createHash("sha1");
    hash.update(fileBuffer);
    resolve(hash.digest("hex"));
  });
}
async function uploadToBackblazeB2(uploadUrl, authToken, filePath, fileName) {
  const maxRetries = 5;
  for (let attempt = 1; attempt <= maxRetries; attempt++) {
    try {
      const fileBuffer = await fs.readFile(filePath);
      const sha1 = await calculateSha1(fileBuffer);
      await fetch(uploadUrl, {
        method: "POST",
        headers: {
          Authorization: authToken,
          "Content-Type": "application/gzip",
          "X-Bz-File-Name": fileName,
          "X-Bz-Content-Sha1": sha1
        },
        body: fileBuffer
      });
      break;
    } catch (error) {
      logger.error(`Error uploading file (attempt ${attempt}):`, error);
      if (attempt === maxRetries) {
        throw new Error(
          `Failed to upload file after ${maxRetries} attempts: ${error instanceof Error ? error.message : "Unknown error"}`
        );
      }
    }
  }
}

export { uploadToBackblazeB2 };
