{"version":3,"sources":["../../src/core/config.ts"],"names":["fs","logger","pathToFileURL","_config","getConfig","loadConfig","file","configPath","loadConfigPath","config","imported","extensions","prefix","ext","fullPath","importPath"],"mappings":"AAAA,OAAOA,MAAQ,UAEf,OAAS,UAAAC,MAAc,cACvB,OAAS,iBAAAC,MAAqB,WAG9B,IAAIC,EAAkB,KAMf,SAASC,GAA2B,CAC1C,OAAOD,CACR,CAEA,eAAsBE,EAAWC,EAAO,OAAyB,CAChE,MAAMC,EAAa,MAAMC,EAAeF,CAAI,EAC5C,IAAIG,EAEJ,GAAIF,EAAY,CACf,MAAMG,EAAW,MAAM,OAAOH,GAC9BE,EAASC,EAAS,SAAWA,GAAY,CAAC,EAC1CT,EAAO,MAAM,6BAA8BQ,CAAM,OAEjDA,EAAS,CACR,cAAe,CACd,QAAS,CAAC,CACX,CACD,EAGD,OAAAN,EAAUM,EACHA,CACR,CAEA,eAAsBD,EAAeF,EAAO,OAAyB,CACpE,MAAMK,EAAa,CAAC,OAAQ,MAAM,EAC5BC,EAASN,EAAK,SAAS,SAAS,EAAI,GAAK,WAE/C,UAAWO,KAAOF,EAAY,CAC7B,MAAMG,EAAW,GAAG,QAAQ,IAAI,KAAKF,IAASN,IAAOO,IACrD,GAAI,CACH,MAAME,EAAab,EAAcY,CAAQ,EAAE,SAAS,EACpD,OAAAd,EAAG,WAAWe,CAAU,EACxBd,EAAO,MAAM,8BAA+Bc,CAAU,EAC/CA,CACR,MAAE,CAEF,EAID,MADiB,GAAGH,IAASN,IAChB,SAAS,SAAS,EACvB,KAEAE,EAAeF,EAAO,SAAS,CAExC","sourcesContent":["import fs from 'node:fs'\nimport { Config } from '../types/index.js'\nimport { logger } from './logger.js'\nimport { pathToFileURL } from 'node:url'\n\n// Global config reference\nlet _config: Config = null\n\n/**\n * Returns the currently loaded configuration.\n * May return null if config has yet to load. Use `loadConfig` to load it first.\n */\nexport function getConfig(): Config | null {\n\treturn _config\n}\n\nexport async function loadConfig(file = 'robo'): Promise<Config> {\n\tconst configPath = await loadConfigPath(file)\n\tlet config: Config\n\n\tif (configPath) {\n\t\tconst imported = await import(configPath)\n\t\tconfig = imported.default ?? imported ?? {}\n\t\tlogger.debug(`Loaded configuration file:`, config)\n\t} else {\n\t\tconfig = {\n\t\t\tclientOptions: {\n\t\t\t\tintents: []\n\t\t\t}\n\t\t}\n\t}\n\n\t_config = config\n\treturn config\n}\n\nexport async function loadConfigPath(file = 'robo'): Promise<string> {\n\tconst extensions = ['.mjs', '.cjs']\n\tconst prefix = file.endsWith('.config') ? '' : '.config/'\n\n\tfor (const ext of extensions) {\n\t\tconst fullPath = `${process.cwd()}/${prefix}${file}${ext}`\n\t\ttry {\n\t\t\tconst importPath = pathToFileURL(fullPath).toString()\n\t\t\tfs.existsSync(importPath)\n\t\t\tlogger.debug(`Found configuration file at`, importPath)\n\t\t\treturn importPath\n\t\t} catch (ignored) {\n\t\t\t// empty\n\t\t}\n\t}\n\n\tconst fileName = `${prefix}${file}`\n\tif (fileName.endsWith('.config')) {\n\t\treturn null\n\t} else {\n\t\treturn loadConfigPath(file + '.config')\n\t}\n}\n"]}