type LogLevel = 'trace' | 'debug' | 'info' | 'wait' | 'other' | 'event' | 'ready' | 'warn' | 'error';
interface CustomLevel {
    label: string;
    priority: number;
}
interface LoggerOptions {
    customLevels?: Record<string, CustomLevel>;
    enabled?: boolean;
    level?: LogLevel | string;
    maxEntries?: number;
}
declare const DEBUG_MODE: boolean;
declare const ANSI_REGEX: RegExp;
declare class LogEntry {
    level: string;
    timestamp: Date;
    data: unknown[];
    constructor(level: string, data: unknown[]);
    message(): string;
}
declare class Logger {
    protected _customLevels: Record<string, CustomLevel>;
    protected _enabled: boolean;
    protected _level: LogLevel | string;
    protected _levelValues: Record<string, number>;
    private _currentIndex;
    private _logBuffer;
    constructor(options?: LoggerOptions);
    protected _log(level: string, ...data: unknown[]): void;
    flush(): Promise<PromiseSettledResult<void>[]>;
    getRecentLogs(count?: number): LogEntry[];
    trace(...data: unknown[]): void;
    debug(...data: unknown[]): void;
    info(...data: unknown[]): void;
    wait(...data: unknown[]): void;
    log(...data: unknown[]): void;
    event(...data: unknown[]): void;
    ready(...data: unknown[]): void;
    warn(...data: unknown[]): void;
    error(...data: unknown[]): void;
    custom(level: string, ...data: unknown[]): void;
}
declare function logger(options?: LoggerOptions): Logger;
declare namespace logger {
    var flush: () => Promise<void>;
    var getRecentLogs: (count?: number) => LogEntry[];
    var trace: (...data: unknown[]) => void;
    var debug: (...data: unknown[]) => void;
    var info: (...data: unknown[]) => void;
    var wait: (...data: unknown[]) => void;
    var log: (...data: unknown[]) => void;
    var event: (...data: unknown[]) => void;
    var ready: (...data: unknown[]) => void;
    var warn: (...data: unknown[]) => void;
    var error: (...data: unknown[]) => void;
    var custom: (level: string, ...data: unknown[]) => void;
}

export { ANSI_REGEX, DEBUG_MODE, LogLevel, Logger, LoggerOptions, logger };
