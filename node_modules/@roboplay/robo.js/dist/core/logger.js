import { inspect } from 'node:util';
import { color } from './color.js';
import { env } from './env.js';

const h=process.env.NODE_ENV!=="production",w=/\x1b\[.*?m/g,a=new Set;function u(r,...e){return new Promise((n,o)=>{const c=e?.map(s=>typeof s=="object"||s instanceof Error||Array.isArray(s)?inspect(s,{colors:!0,depth:null}):s);r.write(c?.join(" ")+`
`,"utf8",s=>{s?o(s):n();});})}const _=100;class b{level;timestamp;data;constructor(e,n){this.level=e,this.data=n,this.timestamp=new Date;}message(){return this.data.map(n=>{if(n instanceof Error)return n.message;if(typeof n=="object")try{return JSON.stringify(n)}catch{return "[unserializable object]"}return n}).join(" ").replace(w,"")}}class g{_customLevels;_enabled;_level;_levelValues;_currentIndex;_logBuffer;constructor(e){const{customLevels:n,enabled:o=!0,level:c}=e??{};this._customLevels=n,this._enabled=o,env.roboplay.host?this._level="trace":this._level=c??"info",this._levelValues={...v,...Object.fromEntries(Object.entries(this._customLevels??{}).map(([s,d])=>[s,d.priority]))},this._currentIndex=0,this._logBuffer=new Array(e?.maxEntries??_);}_log(e,...n){if(this._enabled&&this._levelValues[this._level]<=this._levelValues[e]){if(e!=="other"){const c=this._customLevels?this._customLevels[e]?.label:m[e];n.unshift((c??e.padEnd(5))+" -");}h&&(this._logBuffer[this._currentIndex]=new b(e,n),this._currentIndex=(this._currentIndex+1)%this._logBuffer.length);let o;switch(e){case"trace":case"debug":o=u(process.stdout,...n);break;case"info":o=u(process.stdout,...n);break;case"wait":o=u(process.stdout,...n);break;case"event":o=u(process.stdout,...n);break;case"warn":o=u(process.stderr,...n);break;case"error":o=u(process.stderr,...n);break;default:o=u(process.stdout,...n);break}a.add(o),o.finally(()=>{a.delete(o);});}}flush(){return Promise.allSettled([...a])}getRecentLogs(e=50){if(e<=0)return [];e=Math.min(e,this._logBuffer.length);const n=(this._currentIndex-e+this._logBuffer.length)%this._logBuffer.length;let o;return n<this._currentIndex?o=this._logBuffer.slice(n,this._currentIndex):o=this._logBuffer.slice(n).concat(this._logBuffer.slice(0,this._currentIndex)),o.reverse()}trace(...e){this._log("trace",...e);}debug(...e){this._log("debug",...e);}info(...e){this._log("info",...e);}wait(...e){this._log("wait",...e);}log(...e){this._log("other",...e);}event(...e){this._log("event",...e);}ready(...e){this._log("ready",...e);}warn(...e){this._log("warn",...e);}error(...e){this._log("error",...e);}custom(e,...n){this._customLevels?.[e]&&this._log(e,...n);}}const v={trace:0,debug:1,info:2,wait:3,other:4,event:5,ready:6,warn:7,error:8},m={trace:color.gray("trace".padEnd(5)),debug:color.cyan("debug".padEnd(5)),info:color.blue("info".padEnd(5)),wait:color.cyan("wait".padEnd(5)),event:color.magenta("event".padEnd(5)),ready:color.green("ready".padEnd(5)),warn:color.yellow("warn".padEnd(5)),error:color.red("error".padEnd(5))};let l=null;function t(r){return r?l=new g(r):l||(l=new g),l}t.flush=async function(){await t().flush();},t.getRecentLogs=function(r=25){return t().getRecentLogs(r)},t.trace=function(...r){return t().trace(...r)},t.debug=function(...r){return t().debug(...r)},t.info=function(...r){return t().info(...r)},t.wait=function(...r){return t().wait(...r)},t.log=function(...r){return t().log(...r)},t.event=function(...r){return t().event(...r)},t.ready=function(...r){return t().ready(...r)},t.warn=function(...r){return t().warn(...r)},t.error=function(...r){return t().error(...r)},t.custom=function(r,...e){return t().custom(r,...e)};

export { w as ANSI_REGEX, h as DEBUG_MODE, g as Logger, t as logger };
//# sourceMappingURL=out.js.map
//# sourceMappingURL=logger.js.map