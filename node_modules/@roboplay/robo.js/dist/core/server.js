import y from 'node:http';
import g from 'node:url';
import { parse } from 'node:querystring';
import { Router } from './router.js';
import { logger } from './logger.js';
import { portal } from './robo.js';
import { composeColors, color } from './color.js';

const w=5*1024*1024;let p=!1,l=null,i=null;const P={isRunning:()=>p,start:(o=3e3)=>new Promise(a=>{if(i){logger.warn("Server is already up and running. No action taken."),a();return}l=new Router,portal.apis.forEach(r=>{l.addRoute({handler:r.handler.default,path:"/api/"+r.key});}),i=y.createServer(async(r,n)=>{const u=g.parse(r.url,!0);let t;if(r.method==="POST"||r.method==="PUT"||r.method==="PATCH")try{t=await E(r);}catch(e){logger.error(`Error in parsing request body: ${e}`),n.statusCode=400,n.end("Invalid request body.");return}const h={req:r,body:t,method:r.method,query:parse(r.url||""),params:{}},d={res:n,hasSent:!1,code:function(e){return this.res.statusCode=e,this},send:function(e){return this.res.end(e),this.hasSent=!0,this},header:function(e,f){return this.res.setHeader(e,f),this}},c=l.find(u.pathname);if(!c?.handler){d.code(404).send("API Route not found.");return}try{const e=await c.handler(h,d);!d.hasSent&&e&&d.code(200).send(e.toString());}catch(e){logger.error(`API Route error: ${e}`),n.statusCode=500,n.end("Server encountered an error.");}}),i.on("error",r=>logger.error(`Server error: ${r}`)),p=!0,i.listen(o,()=>{logger.ready(`\u{1F680} Server is live at ${composeColors(color.bold,color.underline)(`http://localhost:${o}`)}`),a();});}),stop:()=>new Promise(o=>{if(!i){logger.warn("Server isn't running. Nothing to stop here."),o();return}i.close(a=>{if(a){logger.error(`Error stopping the server: ${a}`);return}p=!1,l=null,i=null,logger.debug("Server has been stopped successfully."),o();});})};var O=P;async function E(o){return new Promise((a,r)=>{let n="",u=0;o.on("data",t=>{if(u+=t.length,u>w){r(new Error("Request body is too large"));return}n+=t;}),o.on("end",()=>{try{let t;try{t=JSON.parse(n);}catch{r(new Error("Invalid JSON data"));return}a(t);}catch(t){r(t);}});})}

export { O as default };
//# sourceMappingURL=out.js.map
//# sourceMappingURL=server.js.map