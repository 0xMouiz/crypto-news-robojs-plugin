import { getConfig } from './config.js';
import { FlashcoreFileAdapter } from './flashcore-fs.js';
import { logger } from './logger.js';

let o;const t=new Map,g={clear:()=>o.clear(),delete:e=>{if(t.has(e)){const r=o.get(e);if(r instanceof Promise)return r.then(a=>{t.get(e).forEach(n=>n(a,void 0));}).then(()=>o.delete(e)).catch(()=>o.delete(e));t.get(e).forEach(a=>a(r,void 0));}return o.delete(e)},get:e=>o.get(e),off:(e,r)=>{t.has(e)&&r?(t.get(e)?.delete(r),t.get(e)?.size===0&&t.delete(e)):t.has(e)&&t.delete(e);},on:(e,r)=>{t.has(e)||t.set(e,new Set),t.get(e)?.add(r);},set:(e,r)=>{if(t.has(e)){const a=o.get(e);if(a instanceof Promise)return a.then(n=>{t.get(e).forEach(i=>i(n,r));}).then(()=>o.set(e,r)).catch(()=>o.set(e,r));t.get(e).forEach(n=>n(a,r));}return o.set(e,r)}};async function p(){const e=getConfig();if(e.flashcore?.keyv)try{logger.debug("Using Keyv Flashcore adapter");const r=(await import('keyv')).default,a=new r(e.flashcore.keyv);a.on("error",n=>{logger.error("Keyv error:",n);}),o=a;}catch(r){throw logger.error(r),new Error("Failed to import or setup the adapter with keyv package.")}else o=new FlashcoreFileAdapter,await o.init();}

export { g as Flashcore, p as prepareFlashcore };
//# sourceMappingURL=out.js.map
//# sourceMappingURL=flashcore.js.map