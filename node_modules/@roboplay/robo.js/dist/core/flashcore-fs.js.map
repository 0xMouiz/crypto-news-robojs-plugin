{"version":3,"sources":["../../src/core/flashcore-fs.ts"],"names":["fs","path","pipeline","zlib","createReadStream","createWriteStream","logger","createHash","FlashcoreFileAdapter","key","fileName","e","gunzip","decompressed","value","gzip"],"mappings":"AAAA,OAAOA,MAAQ,mBACf,OAAOC,MAAU,YACjB,OAAS,YAAAC,MAAgB,uBACzB,OAAOC,MAAU,YACjB,OAAS,oBAAAC,EAAkB,qBAAAC,MAAyB,UACpD,OAAS,UAAAC,MAAc,cACvB,OAAS,cAAAC,MAAkB,cAGpB,MAAMC,CAAgF,CAC5F,OAAe,SAAWP,EAAK,KAAK,QAAQ,IAAI,EAAG,QAAS,MAAM,EAElE,MAAM,OAA0B,CAC/B,GAAI,CACH,aAAMD,EAAG,GAAGQ,EAAqB,SAAU,CAAE,UAAW,GAAM,MAAO,EAAK,CAAC,EAC3E,MAAMR,EAAG,MAAMQ,EAAqB,SAAU,CAAE,UAAW,EAAK,CAAC,EAC1D,EACR,MAAE,CACD,MAAO,EACR,CACD,CAEA,MAAM,OAAOC,EAA0B,CACtC,GAAI,CACH,MAAMC,EAAWT,EAAK,KAAKO,EAAqB,SAAU,KAAK,YAAYC,CAAG,CAAC,EAC/E,aAAMT,EAAG,OAAOU,CAAQ,EACjB,EACR,OAASC,EAAP,CACD,OAAAL,EAAO,KAAK,yBAAyBG,kCAAqCE,CAAC,EACpE,EACR,CACD,CAEA,MAAM,IAAIF,EAAgC,CACzC,GAAI,CACH,MAAMC,EAAWT,EAAK,KAAKO,EAAqB,SAAU,KAAK,YAAYC,CAAG,CAAC,EACzEG,EAAST,EAAK,aAAa,EACjC,MAAMD,EAASE,EAAiBM,CAAQ,EAAGE,CAAM,EACjD,MAAMC,EAAeD,EAAO,KAAK,EACjC,OAAOC,EAAgB,KAAK,MAAMA,EAAa,SAAS,CAAC,EAAU,MACpE,MAAE,CACD,MACD,CACD,CAEA,MAAM,MAAO,CACZ,GAAI,CACH,MAAMb,EAAG,MAAMQ,EAAqB,SAAU,CAAE,UAAW,EAAK,CAAC,CAClE,OAAS,EAAP,CACDF,EAAO,MAAM,8DAA+D,CAAC,CAC9E,CACD,CAEA,MAAM,IAAIG,EAAQK,EAA4B,CAC7C,GAAI,CACH,MAAMJ,EAAWT,EAAK,KAAKO,EAAqB,SAAU,KAAK,YAAYC,CAAG,CAAC,EACzEM,EAAOZ,EAAK,WAAW,EAC7B,OAAAY,EAAK,MAAM,KAAK,UAAUD,CAAK,CAAC,EAChCC,EAAK,IAAI,EACT,MAAMb,EAASa,EAAMV,EAAkBK,CAAQ,CAAC,EACzC,EACR,MAAE,CACD,MAAO,EACR,CACD,CAEQ,YAAYD,EAAgB,CACnC,OAAOF,EAAW,QAAQ,EAAE,OAAOE,EAAI,SAAS,CAAC,EAAE,OAAO,KAAK,CAChE,CACD","sourcesContent":["import fs from 'node:fs/promises'\nimport path from 'node:path'\nimport { pipeline } from 'node:stream/promises'\nimport zlib from 'node:zlib'\nimport { createReadStream, createWriteStream } from 'node:fs'\nimport { logger } from './logger.js'\nimport { createHash } from 'node:crypto'\nimport type { FlashcoreAdapter } from '../types/index.js'\n\nexport class FlashcoreFileAdapter<K = string, V = unknown> implements FlashcoreAdapter<K, V> {\n\tprivate static DATA_DIR = path.join(process.cwd(), '.robo', 'data')\n\n\tasync clear(): Promise<boolean> {\n\t\ttry {\n\t\t\tawait fs.rm(FlashcoreFileAdapter.DATA_DIR, { recursive: true, force: true })\n\t\t\tawait fs.mkdir(FlashcoreFileAdapter.DATA_DIR, { recursive: true })\n\t\t\treturn true\n\t\t} catch {\n\t\t\treturn false\n\t\t}\n\t}\n\n\tasync delete(key: K): Promise<boolean> {\n\t\ttry {\n\t\t\tconst fileName = path.join(FlashcoreFileAdapter.DATA_DIR, this._getSafeKey(key))\n\t\t\tawait fs.unlink(fileName)\n\t\t\treturn true\n\t\t} catch (e) {\n\t\t\tlogger.warn(`Failed to delete key \"${key}\" from Flashcore file adapter.`, e)\n\t\t\treturn false\n\t\t}\n\t}\n\n\tasync get(key: K): Promise<V | undefined> {\n\t\ttry {\n\t\t\tconst fileName = path.join(FlashcoreFileAdapter.DATA_DIR, this._getSafeKey(key))\n\t\t\tconst gunzip = zlib.createGunzip()\n\t\t\tawait pipeline(createReadStream(fileName), gunzip)\n\t\t\tconst decompressed = gunzip.read()\n\t\t\treturn decompressed ? (JSON.parse(decompressed.toString()) as V) : undefined\n\t\t} catch {\n\t\t\treturn undefined\n\t\t}\n\t}\n\n\tasync init() {\n\t\ttry {\n\t\t\tawait fs.mkdir(FlashcoreFileAdapter.DATA_DIR, { recursive: true })\n\t\t} catch (e) {\n\t\t\tlogger.error('Failed to create data directory for Flashcore file adapter.', e)\n\t\t}\n\t}\n\n\tasync set(key: K, value: V): Promise<boolean> {\n\t\ttry {\n\t\t\tconst fileName = path.join(FlashcoreFileAdapter.DATA_DIR, this._getSafeKey(key))\n\t\t\tconst gzip = zlib.createGzip()\n\t\t\tgzip.write(JSON.stringify(value))\n\t\t\tgzip.end()\n\t\t\tawait pipeline(gzip, createWriteStream(fileName))\n\t\t\treturn true\n\t\t} catch {\n\t\t\treturn false\n\t\t}\n\t}\n\n\tprivate _getSafeKey(key: K): string {\n\t\treturn createHash('sha256').update(key.toString()).digest('hex')\n\t}\n}\n"]}