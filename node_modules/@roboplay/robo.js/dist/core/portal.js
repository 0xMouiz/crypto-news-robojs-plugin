import { Collection } from 'discord.js';
import _ from 'node:path';
import { pathToFileURL } from 'node:url';
import { getManifest } from '../cli/utils/manifest.js';
import { hasProperties } from '../cli/utils/utils.js';
import { logger } from './logger.js';
import { composeColors, color, hex } from './color.js';
import { getConfig } from './config.js';

class R{apis;commands;context;events;middleware=[];moduleKeys=new Set;_enabledModules={};_modules={};constructor(n,o,r,i,a){this.apis=n,this.commands=o,this.context=r,this.events=i,this.middleware=a,n.forEach(t=>{t.module&&this.moduleKeys.add(t.module);}),o.forEach(t=>{t.module&&this.moduleKeys.add(t.module);}),r.forEach(t=>{t.module&&this.moduleKeys.add(t.module);}),i.forEach(t=>{t.forEach(c=>{c.module&&this.moduleKeys.add(c.module);});}),a.forEach(t=>{t.module&&this.moduleKeys.add(t.module);}),this.moduleKeys=new Set([...this.moduleKeys].sort());}module(n){let o=this._modules[n];return o||(o=new j(n,this._enabledModules),this._modules[n]=o),o}static async open(){const n=await b("api"),o=await b("commands"),r=await b("context"),i=await b("events"),a=[...(await b("middleware")).values()];return new R(n,o,r,i,a)}}class j{constructor(n,o){this._moduleName=n;this._enabledModules=o;}get isEnabled(){return this._enabledModules[this._moduleName]??!0}setEnabled(n){this._enabledModules[this._moduleName]=n;}}function D(e){const o=getConfig().plugins?.find(i=>(typeof i=="string"?i:i[0])===e);return (typeof o=="string"?null:o?.[1])??null}async function h(e,n){const{manifestEntries:o,recursionKeys:r=[],type:i}=n,a=[];for(const t in o){const c=Array.isArray(o)&&i!=="middleware"?o:o[t];(Array.isArray(c)?c:[c]).forEach(d=>{const g=[...r,t];if(a.push(e(d,g)),hasProperties(d,["subcommands"])&&d.subcommands){const l=h(e,{manifestEntries:d.subcommands,recursionKeys:g,type:i});a.push(l);}else if(hasProperties(d,["subroutes"])&&d.subroutes){const l=h(e,{manifestEntries:d.subroutes,recursionKeys:g,type:i});a.push(l);}});}return Promise.all(a)}async function b(e){const n=new Collection,o=getManifest(),r=e==="commands"?composeColors(color.blue,color.bold):e==="context"?composeColors(hex("#536DFE"),color.bold):e==="events"?composeColors(color.magenta,color.bold):composeColors(color.gray,color.bold),d=e==="api"?s=>r(`${s}`):e==="commands"?s=>r(`/${s}`):e==="context"?s=>r(`${s} (${s})`):e==="events"?s=>r(`${s} (${o.events[s].length})`):s=>r(o.middleware[parseInt(s)]?.__path),g=Object.keys(o[e]).map(d);logger.debug(`Loading ${e}: ${g.join(", ")}`);const l=async(s,f)=>{if(!s.__path)return;const v=_.join(process.cwd(),s.__plugin?.path??"."),H=pathToFileURL(_.join(v,s.__path)).toString(),p={auto:s.__auto,description:s.description,handler:await import(H),key:f.join("/"),module:s.__module,path:s.__path,plugin:s.__plugin,type:e==="events"?"event":e==="commands"?"command":e};if(e==="events"){const m=f[0];n.has(m)||n.set(m,[]),n.get(m).push(p);}else if(e==="commands"){const m=f.join(" ");n.set(m,p);}else if(e==="context"){const m=f[0];n.set(m,p);}else e==="middleware"?n.set(f[0],p):e==="api"&&n.set(f.join("/"),p);};return e==="context"?(await h(l,{manifestEntries:o.context.message,type:e}),await h(l,{manifestEntries:o.context.user,type:e})):await h(l,{manifestEntries:o[e],type:e}),n}

export { R as default, D as getPluginOptions };
//# sourceMappingURL=out.js.map
//# sourceMappingURL=portal.js.map