let a;const p=new Promise(e=>{a=e;});function c(){process.on("SIGINT",async()=>{const{logger:e}=await import('./logger.js'),{Robo:t}=await import('./robo.js');e.debug("Received SIGINT signal."),t.stop();}),process.on("SIGTERM",async()=>{const{logger:e}=await import('./logger.js'),{Robo:t}=await import('./robo.js');e.debug("Received SIGTERM signal."),t.stop();}),process.on("message",async e=>{const{logger:t}=await import('./logger.js'),{Robo:s}=await import('./robo.js');if(t.debug("Received message from parent:",e),e?.type==="restart")s.restart();else if(e?.type==="state-save"){const{saveState:o}=await import('./state.js');o();}else if(e?.type==="state-load"){const{loadState:o}=await import('./state.js');o(e.state),a();}else t.debug("Unknown message:",e);}),process.on("unhandledRejection",async e=>{const{env:t}=await import('./env.js'),{logger:s}=await import('./logger.js'),{client:o,Robo:r}=await import('./robo.js');if(o?.isReady()||(s.error(e),process.exit(1)),s.error(e),t.nodeEnv==="production")return;const{sendDebugError:i}=await import('./debug.js');await i(e)||r.stop(1);}),process.send?.({type:"ready"}),setTimeout(()=>{process.send?.({type:"ready",delayed:!0});},1e3);}

export { c as registerProcessEvents, p as stateLoad };
//# sourceMappingURL=out.js.map
//# sourceMappingURL=process.js.map